// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


#include "ShooterKickBall.h"

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR

ShooterKickBall::ShooterKickBall(): Command() {
        // Use requires() here to declare subsystem dependencies
    // eg. requires(chassis);
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
	Requires(Robot::shooter.get());
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
}

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR

// Called just before this Command runs the first time
void ShooterKickBall::Initialize() {
	m_CurrentKickState = kKICK_BALL;
	KickCount = 0;
}

// Called repeatedly when this Command is scheduled to run
void ShooterKickBall::Execute() {
	switch (m_CurrentKickState) {
	case kKICK_BALL:
		Robot::shooter->KickerExtend();
		if (++KickCount > kKickDelay) {
			m_CurrentKickState = kKICKER_MOVE;
		}
		break;
	case kKICKER_MOVE:
		if (Robot::shooter->KickerDetect()) {
			Robot::shooter->KickerStop();
			m_CurrentKickState = kPULL_KICKER_BACK;
		}
		break;
	case kPULL_KICKER_BACK:
		Robot::shooter->KickerRetract();
		if (Robot::shooter->KickerDetect()) {
			Robot::shooter->KickerStop();
			m_CurrentKickState = kKICKER_CREEP_FORWARD;
		}
		break;
	case kKICKER_CREEP_FORWARD:
		Robot::shooter->KickerMove(kCreepSpeed);
		if (!Robot::shooter->KickerDetect()) {
			m_CurrentKickState = kKICKER_STOP;
		}
		break;
	case kKICKER_STOP:
		Robot::shooter->KickerStop();
		break;
	}
}

// Make this return true when this Command no longer needs to run execute()
bool ShooterKickBall::IsFinished() {
    return IsTimedOut() || (m_CurrentKickState == kKICKER_STOP);
}

// Called once after isFinished returns true
void ShooterKickBall::End() {
	Robot::shooter->KickerStop();
}

// Called when another command which requires one or more of the same
// subsystems is scheduled to run
void ShooterKickBall::Interrupted() {

}

ShooterKickBall::ShooterKickBall(double timeout): Command(timeout) {
	Requires(Robot::shooter.get());
}
