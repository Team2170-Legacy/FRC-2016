// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


#include "AutonomousDriveStraightForTime.h"

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR

AutonomousDriveStraightForTime::AutonomousDriveStraightForTime(double DriveTime): Command() {
    m_DriveTime = DriveTime;
        // Use requires() here to declare subsystem dependencies
    // eg. requires(chassis);
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
}
// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR

// Called just before this Command runs the first time
void AutonomousDriveStraightForTime::Initialize() {
	 	Robot::driveTrain->ResetChassisYaw();
	 	//Robot::driveTrain->movementData->ResetOdometer();
	 	//Robot::driveTrain->movementData->Start();
	 	Command::SetTimeout(m_DriveTime);


}

// Called repeatedly when this Command is scheduled to run
void AutonomousDriveStraightForTime::Execute() {
	//sets forward or backward
	Robot::driveTrain->DriveStraight(false);

}

// Make this return true when this Command no longer needs to run execute()
bool AutonomousDriveStraightForTime::IsFinished() {
    return false;
}

// Called once after isFinished returns true
void AutonomousDriveStraightForTime::End() {
	Robot::driveTrain->StopMotors();
}

/*double AutonomousDriveStraightForTime::GetDriveTime(void) {
	double fTime = 0.0;
 	if (bSmartDashCtrl) {
 		fTime = (double)SmartDashboard::GetNumber(mKey);
 		//Outputs what was
 		SmartDashboard::PutNumber("TimeInputted", fTime);
 		//Sets the range for the input
 		fTime = fmin(fmax(fTime, 0), 15);
 		//Displays the new number
 		SmartDashboard::PutNumber("ChassisDriveStraightForTimeInput", fTime);
 	}
 	else {
 		fTime = mDriveTime;
 	}
 	return fTime;
 } */


// Called when another command which requires one or more of the same
// subsystems is scheduled to run
void AutonomousDriveStraightForTime::Interrupted() {

}
