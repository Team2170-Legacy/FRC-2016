// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


#include "AutonomousShooterAim.h"
#include "../VisionEngine.h"


AutonomousShooterAim::AutonomousShooterAim() :
		Command(), m_ElevationGain(
				Preferences::GetInstance()->GetFloat("ElevationGain",
						kDefaultGain)), m_TargetTolerance(
				Preferences::GetInstance()->GetInt("TargetTolerance",
						kDefaultTolerance)), m_TargetLockLimit(
				Preferences::GetInstance()->GetInt("TargetLockLimit",
						kDefaultLockLimit)) {
	// Use requires() here to declare subsystem dependencies
	// eg. requires(chassis);
	Requires(Robot::shooter.get());
}


// Called just before this Command runs the first time
void AutonomousShooterAim::Initialize() {
	m_OnTargetCount = 0;
}

// Called repeatedly when this Command is scheduled to run
void AutonomousShooterAim::Execute() {
	float TargetError = Robot::ve->GetElevationError();
	float AimCommand = TargetError * m_ElevationGain;

	if ((TargetError < m_TargetTolerance) &&
			(TargetError > -m_TargetTolerance)) {
		m_OnTargetCount++;
	}
	else {
		m_OnTargetCount = 0;
	}
	Robot::shooter->ShooterAim(AimCommand);

}

// Make this return true when this Command no longer needs to run execute()
bool AutonomousShooterAim::IsFinished() {
    return (m_OnTargetCount > m_TargetLockLimit);
}

// Called once after isFinished returns true
void AutonomousShooterAim::End() {
	Robot::shooter->ShooterStop();
}

// Called when another command which requires one or more of the same
// subsystems is scheduled to run
void AutonomousShooterAim::Interrupted() {

}
