// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


#include "OI.h"

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES
#include "SmartDashboard/SmartDashboard.h"
#include "Commands/ArcadeDriveTeleop.h"
#include "Commands/AutonomousAimandShoot.h"
#include "Commands/AutonomousChassisAim.h"
#include "Commands/AutonomousClimbTower.h"
#include "Commands/AutonomousCollectBall.h"
#include "Commands/AutonomousDefault.h"
#include "Commands/AutonomousDriveForwardStraight.h"
#include "Commands/AutonomousDriveLowBarShootLow.h"
#include "Commands/AutonomousDriveLowShootHigh.h"
#include "Commands/AutonomousDriveStraightForTime.h"
#include "Commands/AutonomousDriveThroughLowBar.h"
#include "Commands/AutonomousDriveToDefense.h"
#include "Commands/AutonomousFireBoulderLow.h"
#include "Commands/AutonomousMotionProfile.h"
#include "Commands/AutonomousPositionCommand.h"
#include "Commands/AutonomousRaiseandClimb.h"
#include "Commands/AutonomousRaiseandDriveOverDefence.h"
#include "Commands/AutonomousRaiseandDrivetoDefense.h"
#include "Commands/AutonomousShooterAim.h"
#include "Commands/AutonomousVelocityCommand.h"
#include "Commands/AutoonomousFireBoulderHigh.h"
#include "Commands/ChassisCorrectYaw.h"
#include "Commands/ChassisHoldPosition.h"
#include "Commands/ChassisRotate180CCW.h"
#include "Commands/ChassisRotate180CW.h"
#include "Commands/ChassisRotate90CCW.h"
#include "Commands/ChassisRotate90CW.h"
#include "Commands/ChassisSetMode.h"
#include "Commands/ShooterFlywheelHigh.h"
#include "Commands/ShooterFlywheelLow.h"
#include "Commands/ShooterFlywheelReverse.h"
#include "Commands/ShooterFlywheelStop.h"
#include "Commands/ShooterGoHome.h"
#include "Commands/ShooterInitialize.h"
#include "Commands/ShooterJoystickControl.h"
#include "Commands/ShooterKickBall.h"
#include "Commands/ShooterLower.h"
#include "Commands/ShooterLowerHook.h"
#include "Commands/ShooterMoveOffHome.h"
#include "Commands/ShooterPrematchPosition.h"
#include "Commands/ShooterRaise.h"
#include "Commands/ShooterRaiseHook.h"
#include "Commands/TankDriveTeleop.h"


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES

OI::OI() {
    // Process operator interface input here.
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    shooterJoystick.reset(new Joystick(1));
    
    joystickButton1.reset(new JoystickButton(shooterJoystick.get(), 11));
    joystickButton1->WhenPressed(new AutonomousRaiseandClimb());
    autoAimandShoot.reset(new JoystickButton(shooterJoystick.get(), 9));
    autoAimandShoot->WhenPressed(new AutonomousAimandShoot());
    cycleKicker.reset(new JoystickButton(shooterJoystick.get(), 10));
    cycleKicker->WhenPressed(new ShooterKickBall());
    homeShooter.reset(new JoystickButton(shooterJoystick.get(), 8));
    homeShooter->WhenPressed(new ShooterInitialize());
    manualLowerHook.reset(new JoystickButton(shooterJoystick.get(), 7));
    manualLowerHook->WhileHeld(new ShooterLowerHook());
    manualRaiseHook.reset(new JoystickButton(shooterJoystick.get(), 6));
    manualRaiseHook->WhileHeld(new ShooterRaiseHook());
    shootLow.reset(new JoystickButton(shooterJoystick.get(), 3));
    shootLow->WhenPressed(new AutonomousFireBoulderLow());
    shooterCollectBall.reset(new JoystickButton(shooterJoystick.get(), 2));
    shooterCollectBall->WhileHeld(new ShooterFlywheelReverse());
    shootHigh.reset(new JoystickButton(shooterJoystick.get(), 1));
    shootHigh->WhenPressed(new AutoonomousFireBoulderHigh());
    driveJoystick.reset(new Joystick(0));
    
    buttonB.reset(new JoystickButton(driveJoystick.get(), 2));
    buttonB->WhileHeld(new ChassisHoldPosition());
    leftBumper.reset(new JoystickButton(driveJoystick.get(), 5));
    leftBumper->WhenPressed(new ChassisRotate90CCW());
    rightBumper.reset(new JoystickButton(driveJoystick.get(), 6));
    rightBumper->WhenPressed(new ChassisRotate90CW());

    // SmartDashboard Buttons
    SmartDashboard::PutData("Chassis Hold Position", new ChassisHoldPosition());
    SmartDashboard::PutData("Shooter Initialize", new ShooterInitialize());
    SmartDashboard::PutData("Shooter Prematch Position", new ShooterPrematchPosition());

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
}

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS

std::shared_ptr<Joystick> OI::getDriveJoystick() {
   return driveJoystick;
}

std::shared_ptr<Joystick> OI::getShooterJoystick() {
   return shooterJoystick;
}


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
