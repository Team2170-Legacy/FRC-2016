// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


#ifndef DRIVE_TRAIN_H
#define DRIVE_TRAIN_H
#include "Commands/Subsystem.h"
#include "WPILib.h"
#include "../MaxSonarEZ1.h"
#include "../ProfileData.h"

#define DEADBAND(val, limit)	((fabs(val) < limit) ? 0.0 : val)

/**
 *
 *
 * @author ExampleAuthor
 */
class DriveTrain: public Subsystem {
private:
	const unsigned short int kCountsPerRev = 360;	// 360 count encoder, x4 sampling
	const double kDefaultVoltageRamp = 36.0;		// 100% in 0.375 seconds
	float mAutoVelocity = 0.5;
	float mYawGain = -0.15;
	bool bDriveStraight = false;

	bool mMotionProcessingActive = false;

	const double kPorportionalGain = 0.75;
	const double kDerivativeGain = 2.5;
	const double kFeedForwardGain = 0.75;

	double AxisPower(double axis, double exponent);

	CANTalon::MotionProfileStatus LeftStatus;
	CANTalon::MotionProfileStatus RightStatus;

	// It's desirable that everything possible is private except
	// for methods that implement subsystem capabilities
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
	std::shared_ptr<CANTalon> cANTalonRight;
	std::shared_ptr<CANTalon> cANTalonLeft;
	std::shared_ptr<RobotDrive> robotDrive;
	std::shared_ptr<AnalogGyro> gyro;
	std::shared_ptr<AnalogInput> maxSonarAI;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
	std::shared_ptr<MaxSonarEZ1> FrontSonar;
	std::shared_ptr<BuiltInAccelerometer> RoboAccels;

public:
	DriveTrain();

	void InitDefaultCommand();
	void SetClosedLoopMode();
	void SetChassisPosition(float position);
	void SetVelocityMode();
	void SetChassisVelocity(float velocity);
	void SetMotionProfileMode();
	void FillProfileBuffer(std::shared_ptr<const ProfileData> LeftWheel);
	void FillProfileBuffer(std::shared_ptr<const ProfileData> LeftWheel,
			std::shared_ptr<const ProfileData> RightWheel);
	void ServiceMotionProfile();
	bool MotionProfileComplete();

	void ArcadeDriveWithJoysticks(float moveVal, float rotateVal);
	void TankDriveWithTriggers(float Left, float Right, float Trigger);
	void DriveStraight(bool Backwards = false);
	void DriveStraight(float magnitude);

	void CommandChassisPosition(float position);
	//turns the robot depending on whether negative or positive
	void Rotate(float rotateSpeed);

	void ResetChassisYaw();
	float ReadChassisYaw();
	float ReadChassisDistance();
	void StopMotors();
	void SetBrakeMode( CANSpeedController::NeutralMode);
	void SetMotionProfileState(CANTalon::SetValueMotionProfile mode);

	double ReadPositionError();

	void SetMotorGains();

	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS
	void setAutoVelocity(float autoVelocity = 0.5) {
		mAutoVelocity = autoVelocity;
	}

	void SetVoltagePercentMode();

};

#endif
