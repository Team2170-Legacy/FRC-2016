// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.




#include "Shooter.h"
#include "../RobotMap.h"
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES
// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

Shooter::Shooter() : Subsystem("Shooter") {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    elevationMotor = RobotMap::shooterElevationMotor;
    flyWheelMotor = RobotMap::shooterFlyWheelMotor;
    hookMotor = RobotMap::shooterHookMotor;
    elevationEncoder = RobotMap::shooterElevationEncoder;
    elevationHome = RobotMap::shooterElevationHome;
    elevationMax = RobotMap::shooterElevationMax;
    hookHome = RobotMap::shooterHookHome;
    hookMax = RobotMap::shooterHookMax;
    ballKicker = RobotMap::shooterBallKicker;
    ballSensor = RobotMap::shooterBallSensor;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
}

void Shooter::InitDefaultCommand() {
    // Set the default command for a subsystem here.
    // SetDefaultCommand(new MySpecialCommand());
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
}

void Shooter::FlyWheelReverse() {
}

void Shooter::FlyWheelStop() {
}

void Shooter::FlyWheelHighSpeed() {
}

void Shooter::FlyWheelLowSpeed() {
}

void Shooter::KickerExtend() {
}

void Shooter::KickerRetract() {
}

bool Shooter::KickerBallDetect() {
}

void Shooter::ShooterElevate() {
}

void Shooter::ShooterLower() {
}

bool Shooter::ShooterIsHome() {
}

bool Shooter::ShooterAtMax() {
}

float Shooter::GetShooterElevation() {
}

void Shooter::HookRaise() {
}

void Shooter::HookLower() {
}

bool Shooter::HookIsHome() {
}

void Shooter::ShooterStop() {
}

void Shooter::HookStop() {
}

void Shooter::KickerStop() {
}

bool Shooter::HookAtMax() {
}
// Put methods for controlling this subsystem
// here. Call these from Commands.

